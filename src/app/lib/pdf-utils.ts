import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface ProductSummary {
  id: string;
  name_en: string;
  unit: string;
  total_quantity: number;
  sku?: string;
}

interface PDFExportOptions {
  title: string;
  dateRange: {
    startDate: string;
    endDate: string;
  };
  data: ProductSummary[];
  companyName?: string;
  generatedBy?: string;
}

export function exportOrderSummaryToPDF(options: PDFExportOptions): void {
  const { title, dateRange, data, companyName = 'B2B Vegetable Management', generatedBy = 'Admin' } = options;
  
  // Create new PDF document
  const doc = new jsPDF();
  
  // Set document properties
  doc.setProperties({
    title: title,
    subject: 'Order Summary Report',
    author: generatedBy,
    creator: companyName
  });
  
  // Add company header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(companyName, 20, 25);
  
  // Add report title
  doc.setFontSize(16);
  doc.setFont('helvetica', 'normal');
  doc.text(title, 20, 40);
  
  // Add date range
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  const formattedStartDate = new Date(dateRange.startDate).toLocaleDateString();
  const formattedEndDate = new Date(dateRange.endDate).toLocaleDateString();
  doc.text(`Date Range: ${formattedStartDate} - ${formattedEndDate}`, 20, 55);
  
  // Add generation info
  doc.setFontSize(10);
  doc.setTextColor(100);
  const currentDate = new Date().toLocaleString();
  doc.text(`Generated on: ${currentDate}`, 20, 65);
  doc.text(`Generated by: ${generatedBy}`, 20, 72);
  
  // Reset text color
  doc.setTextColor(0);
  
  // Prepare table data
  const tableData = data.map((product, index) => [
    index + 1,
    product.name_en,
    product.sku || 'N/A',
    product.total_quantity.toString(),
    product.unit
  ]);
  
  // Calculate totals
  const totalProducts = data.length;
  const totalQuantity = data.reduce((sum, product) => sum + product.total_quantity, 0);
  
  // Add summary statistics
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text('Summary Statistics:', 20, 85);
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Total Products: ${totalProducts}`, 20, 95);
  doc.text(`Total Quantity Ordered: ${totalQuantity}`, 20, 102);
  
  // Create table
  autoTable(doc, {
    head: [['#', 'Product Name', 'SKU', 'Total Quantity', 'Unit']],
    body: tableData,
    startY: 115,
    theme: 'grid',
    headStyles: {
      fillColor: [16, 185, 129], // Emerald color
      textColor: [255, 255, 255],
      fontStyle: 'bold',
      fontSize: 10
    },
    bodyStyles: {
      fontSize: 9,
      cellPadding: 4
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252] // Light gray
    },
    columnStyles: {
      0: { halign: 'center', cellWidth: 15 }, // # column
      1: { cellWidth: 60 }, // Product Name
      2: { cellWidth: 30 }, // SKU
      3: { halign: 'right', cellWidth: 30 }, // Total Quantity
      4: { halign: 'center', cellWidth: 20 } // Unit
    },
    margin: { left: 20, right: 20 },
    didDrawPage: (data) => {
      // Add page numbers
      const pageCount = (doc as any).internal.getNumberOfPages();
      const pageSize = doc.internal.pageSize;
      const pageHeight = pageSize.height || pageSize.getHeight();
      
      doc.setFontSize(8);
      doc.setTextColor(100);
      doc.text(
        `Page ${data.pageNumber} of ${pageCount}`,
        pageSize.width - 40,
        pageHeight - 10
      );
    }
  });
  
  // Add footer with additional info
  const finalY = (doc as any).lastAutoTable.finalY || 200;
  
  if (data.length === 0) {
    doc.setFontSize(12);
    doc.setTextColor(150);
    doc.text('No orders found for the selected date range.', 20, finalY + 20);
  } else {
    // Add notes section
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(0);
    doc.text('Notes:', 20, finalY + 20);
    
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(9);
    doc.text('• This report shows total quantities needed for all pending and processing orders.', 20, finalY + 30);
    doc.text('• Quantities are aggregated by product across all orders in the date range.', 20, finalY + 37);
    doc.text('• Use this report for procurement and inventory planning.', 20, finalY + 44);
  }
  
  // Generate filename
  const filename = `order-summary-${dateRange.startDate}-to-${dateRange.endDate}.pdf`;
  
  // Save the PDF
  doc.save(filename);
}

export function exportProductListToPDF(products: ProductSummary[], title: string = 'Product List'): void {
  const doc = new jsPDF();
  
  // Add title
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.text(title, 20, 25);
  
  // Add generation date
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 35);
  
  // Prepare table data
  const tableData = products.map((product, index) => [
    index + 1,
    product.name_en,
    product.sku || 'N/A',
    product.unit
  ]);
  
  // Create table
  autoTable(doc, {
    head: [['#', 'Product Name', 'SKU', 'Unit']],
    body: tableData,
    startY: 45,
    theme: 'grid',
    headStyles: {
      fillColor: [16, 185, 129],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252]
    }
  });
  
  // Save the PDF
  doc.save(`${title.toLowerCase().replace(/\s+/g, '-')}.pdf`);
} 